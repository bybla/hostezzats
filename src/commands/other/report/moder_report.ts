// Project: Hostezza Discord Bot
// Created by: bybla
// Created on: 2025-04-12
// Descripton: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–± –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏


// commands/other/report/moder_report.ts
import { Command } from '../../../utils/commands/command';
import { 
    ActionRowBuilder, 
    Message, 
    StringSelectMenuBuilder, 
    StringSelectMenuInteraction,
    EmbedBuilder,
    MessageActionRowComponentBuilder,
    Colors,
    TextChannel,
    InteractionCollector,
    PermissionsBitField
} from 'discord.js';
import prisma from '../../../db';
import { logger } from '../../../utils/logger/logger';

export default new Command({
    name: 'manage_report',
    aliases: ['moder_report', 'mr'],
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±–∞–º–∏',
    execute: async (message: Message, args: string[]): Promise<void> => {
        try {
            logger.info(`–ö–æ–º–∞–Ω–¥–∞ manage report –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${message.author.tag}`);

            const reports = await prisma.report.findMany({
                where: { closedAt: null },
                include: { reporter: true, reported: true },
                orderBy: { createdAt: 'desc' },
                take: 25
            });

            if (reports.length === 0) {
                const noReportsEmbed = new EmbedBuilder()
                    .setColor(Colors.Green)
                    .setTitle('‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∂–∞–ª–æ–±')
                    .setDescription('–í—Å–µ –∂–∞–ª–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!')
                    .setFooter({ text: `–ó–∞–ø—Ä–æ—Å–∏–ª: ${message.author.tag}`, iconURL: message.author.displayAvatarURL() })
                    .setTimestamp();

                await message.reply({ embeds: [noReportsEmbed] });
                return;
            }

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('manage_report')
                .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–ª–æ–±—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
                .addOptions(
                    reports.map(report => ({
                        label: `#${report.id.slice(0, 6)} | ${report.reported.username}`,
                        description: report.reason.slice(0, 50),
                        value: report.id
                    }))
                );

            const row = new ActionRowBuilder<MessageActionRowComponentBuilder>()
                .addComponents(selectMenu);

            const reportsListEmbed = new EmbedBuilder()
                .setColor(Colors.Orange)
                .setTitle('üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±–∞–º–∏')
                .setDescription(`–î–æ—Å—Ç—É–ø–Ω–æ ${reports.length} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±`)
                .addFields({
                    name: 'üìå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∂–∞–ª–æ–±—ã', 
                    value: reports.slice(0, 3).map(r => 
                        `**#${r.id.slice(0, 6)}** | ${r.reported.username}: ${r.reason.slice(0, 30)}...`
                    ).join('\n') || '–ù–µ—Ç –∂–∞–ª–æ–±'
                })
                .setFooter({ text: `–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${message.author.tag}`, iconURL: message.author.displayAvatarURL() })
                .setTimestamp();

            const sentMessage = await message.reply({
                embeds: [reportsListEmbed],
                components: [row]
            });

            logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±–∞–º–∏ –¥–ª—è ${message.author.tag} —Å ${reports.length} –∂–∞–ª–æ–±–∞–º–∏`);

            const collector = new InteractionCollector(message.client, {
                channel: message.channel as TextChannel,
                message: sentMessage,
                filter: i => i.isStringSelectMenu() && 
                           i.customId === 'manage_report' &&
                           i.user.id === message.author.id,
                time: 120_000
            });
            
            collector.on('collect', async (interaction) => {
                if (!interaction.isStringSelectMenu()) return;
                
                try {
                    const reportId = interaction.values[0];
                    logger.debug(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} –≤—ã–±—Ä–∞–ª –∂–∞–ª–æ–±—É ${reportId}`);

                    const report = await prisma.report.findUnique({
                        where: { id: reportId },
                        include: { reporter: true, reported: true }
                    });

                    if (!report) {
                        logger.warn(`–ñ–∞–ª–æ–±–∞ ${reportId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
                        await interaction.reply({ 
                            embeds: [
                                new EmbedBuilder()
                                    .setColor(Colors.Red)
                                    .setTitle('‚ùå –û—à–∏–±–∫–∞')
                                    .setDescription('–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')
                            ],
                            ephemeral: true 
                        });
                        return;
                    }

                    await handleReportSelection(interaction, report, sentMessage);
                } catch (error) {
                    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞:', error);
                    await interaction.reply({ 
                        embeds: [
                            new EmbedBuilder()
                                .setColor(Colors.Red)
                                .setTitle('‚ùå –û—à–∏–±–∫–∞')
                                .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞')
                        ],
                        ephemeral: true 
                    }).catch(err => logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', err));
                }
            });

            collector.on('end', () => {
                logger.debug(`–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${sentMessage.id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É`);
                sentMessage.edit({ components: [] }).catch(err => logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', err));
            });
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã manage report:', error);
            const errorEmbed = new EmbedBuilder()
                .setColor(Colors.Red)
                .setTitle('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã')
                .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã')
                .setFooter({ text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${message.author.tag}`, iconURL: message.author.displayAvatarURL() })
                .setTimestamp();

            await message.reply({ embeds: [errorEmbed] }).catch(err => logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', err));
        }
    }
});

async function handleReportSelection(
    interaction: StringSelectMenuInteraction, 
    report: ReportWithRelations,
    originalMessage: Message
) {
    try {
        logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±—ã #${report.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${interaction.user.tag}`);
        
        const actionMenu = new StringSelectMenuBuilder()
            .setCustomId(`report_action_${report.id}`)
            .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')
            .addOptions(
                { 
                    label: '–ü—Ä–∏–Ω—è—Ç—å –∂–∞–ª–æ–±—É', 
                    value: 'accept', 
                    description: '–í—ã–Ω–µ—Å—Ç–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ',
                    emoji: '‚úÖ'
                },
                { 
                    label: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∂–∞–ª–æ–±—É', 
                    value: 'reject', 
                    description: '–ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π',
                    emoji: '‚ùå'
                },
                { 
                    label: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', 
                    value: 'request_info', 
                    description: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –∂–∞–ª–æ–±—â–∏–∫–∞',
                    emoji: '‚ùì'
                }
            );

        const actionRow = new ActionRowBuilder<MessageActionRowComponentBuilder>()
            .addComponents(actionMenu);

        const reportEmbed = new EmbedBuilder()
            .setColor(Colors.Red)
            .setTitle(`üìÑ –ñ–∞–ª–æ–±–∞ #${report.id}`)
            .setDescription(`**–ü—Ä–∏—á–∏–Ω–∞:**\n${report.reason}`)
            .addFields(
                { name: 'üë§ –ñ–∞–ª–æ–±—â–∏–∫', value: `\`${report.reporter.username}\` (ID: ${report.reporter.discordId})`, inline: true },
                { name: 'üîç –ù–∞ –∫–æ–≥–æ', value: `\`${report.reported.username}\` (ID: ${report.reported.discordId})`, inline: true },
                { name: 'üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', value: `<t:${Math.floor(report.createdAt.getTime() / 1000)}:R>`, inline: true }
            )
            .setFooter({ 
                text: `–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: ${interaction.user.tag}`, 
                iconURL: interaction.user.displayAvatarURL() 
            })
            .setTimestamp();

        const sentMessage = await interaction.reply({
            embeds: [reportEmbed],
            components: [actionRow],
            ephemeral: true,
            fetchReply: true
        });

        logger.debug(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∂–∞–ª–æ–±—ã #${report.id}`);

        const actionCollector = new InteractionCollector(interaction.client, {
            channel: interaction.channel as TextChannel,
            message: sentMessage,
            filter: i => i.isStringSelectMenu() && 
                       i.customId === `report_action_${report.id}` &&
                       i.user.id === interaction.user.id,
            time: 120_000
        });

        actionCollector.on('collect', async (actionInteraction) => {
            if (!actionInteraction.isStringSelectMenu()) return;
            
            try {
                await actionInteraction.deferReply({ ephemeral: true });
                const action = actionInteraction.values[0];

                logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${actionInteraction.user.tag} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ ${action} –¥–ª—è –∂–∞–ª–æ–±—ã #${report.id}`);

                switch (action) {
                    case 'accept':
                        await handleAcceptReport(actionInteraction, report);
                        break;
                    case 'reject':
                        await handleRejectReport(actionInteraction, report);
                        break;
                    case 'request_info':
                        await handleRequestInfo(actionInteraction, report);
                        break;
                }

                await originalMessage.edit({ components: [] });
                actionCollector.stop();
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∂–∞–ª–æ–±—ã #${report.id}:`, error);
                await actionInteraction.followUp({
                    embeds: [
                        new EmbedBuilder()
                            .setColor(Colors.Red)
                            .setTitle('‚ùå –û—à–∏–±–∫–∞')
                            .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è')
                    ],
                    ephemeral: true
                });
            }
        });

        actionCollector.on('end', () => {
            logger.debug(`–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∂–∞–ª–æ–±—ã #${report.id} –∑–∞–≤–µ—Ä—à–µ–Ω`);
        });
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã #${report.id}:`, error);
        await interaction.followUp({
            embeds: [
                new EmbedBuilder()
                    .setColor(Colors.Red)
                    .setTitle('‚ùå –û—à–∏–±–∫–∞')
                    .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã')
            ],
            ephemeral: true
        });
    }
}

type ReportWithRelations = Awaited<ReturnType<typeof prisma.report.findUnique>> & {
    reporter: { discordId: string; username: string };
    reported: { discordId: string; username: string };
};

async function handleAcceptReport(interaction: StringSelectMenuInteraction, report: ReportWithRelations) {
    try {
        const moderator = await prisma.user.upsert({
            where: { discordId: interaction.user.id },
            create: {
                discordId: interaction.user.id,
                username: interaction.user.username
            },
            update: {
                username: interaction.user.username
            }
        });

        await prisma.report.update({
            where: { id: report.id },
            data: {
                verdict: '–ü—Ä–∏–Ω—è—Ç–æ',
                closedAt: new Date(),
                moderatorId: moderator.id
            }
        });

        logger.info(`–ñ–∞–ª–æ–±–∞ #${report.id} –ø—Ä–∏–Ω—è—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user.tag}`);

        const successEmbed = new EmbedBuilder()
            .setColor(Colors.Green)
            .setTitle('‚úÖ –ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞')
            .setDescription(`–ñ–∞–ª–æ–±–∞ #${report.id} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${report.reported.username} –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞.`)
            .addFields(
                { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: interaction.user.tag, inline: true },
                { name: '–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true }
            )
            .setFooter({ text: `ID –∂–∞–ª–æ–±—ã: ${report.id}` })
            .setTimestamp();

        await interaction.followUp({ embeds: [successEmbed] });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—â–∏–∫–∞
        try {
            const reporterUser = await interaction.client.users.fetch(report.reporter.discordId);
            const reporterEmbed = new EmbedBuilder()
                .setColor(Colors.Green)
                .setTitle('‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞')
                .setDescription(`–í–∞—à–∞ –∂–∞–ª–æ–±–∞ #${report.id} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${report.reported.username} –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.`)
                .addFields(
                    { name: '–ü—Ä–∏—á–∏–Ω–∞', value: report.reason },
                    { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: interaction.user.tag }
                )
                .setTimestamp();

            await reporterUser.send({ embeds: [reporterEmbed] });
            logger.info(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∂–∞–ª–æ–±—â–∏–∫—É ${reporterUser.tag}`);
        } catch (error) {
            logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—â–∏–∫—É ${report.reporter.username}:`, error);
        }

    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∂–∞–ª–æ–±—ã #${report.id}:`, error);
        await interaction.followUp({
            embeds: [
                new EmbedBuilder()
                    .setColor(Colors.Red)
                    .setTitle('‚ùå –û—à–∏–±–∫–∞')
                    .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∂–∞–ª–æ–±—ã')
            ],
            ephemeral: true
        });
    }
}

async function handleRejectReport(interaction: StringSelectMenuInteraction, report: ReportWithRelations) {
    try {
        const moderator = await prisma.user.upsert({
            where: { discordId: interaction.user.id },
            create: {
                discordId: interaction.user.id,
                username: interaction.user.username
            },
            update: {
                username: interaction.user.username
            }
        });

        await prisma.report.update({
            where: { id: report.id },
            data: {
                verdict: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
                closedAt: new Date(),
                moderatorId: moderator.id
            }
        });

        logger.info(`–ñ–∞–ª–æ–±–∞ #${report.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user.tag}`);

        const successEmbed = new EmbedBuilder()
            .setColor(Colors.Orange)
            .setTitle('‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
            .setDescription(`–ñ–∞–ª–æ–±–∞ #${report.id} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${report.reported.username} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`)
            .addFields(
                { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: interaction.user.tag, inline: true },
                { name: '–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true }
            )
            .setFooter({ text: `ID –∂–∞–ª–æ–±—ã: ${report.id}` })
            .setTimestamp();

        await interaction.followUp({ embeds: [successEmbed] });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—â–∏–∫–∞
        try {
            const reporterUser = await interaction.client.users.fetch(report.reporter.discordId);
            const reporterEmbed = new EmbedBuilder()
                .setColor(Colors.Orange)
                .setTitle('‚ùå –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
                .setDescription(`–í–∞—à–∞ –∂–∞–ª–æ–±–∞ #${report.id} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${report.reported.username} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.`)
                .addFields(
                    { name: '–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã', value: report.reason },
                    { name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: interaction.user.tag },
                    { name: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', value: '–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä—à–µ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.' }
                )
                .setTimestamp();

            await reporterUser.send({ embeds: [reporterEmbed] });
            logger.info(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∂–∞–ª–æ–±—â–∏–∫—É ${reporterUser.tag}`);
        } catch (error) {
            logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—â–∏–∫—É ${report.reporter.username}:`, error);
        }

    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã #${report.id}:`, error);
        await interaction.followUp({
            embeds: [
                new EmbedBuilder()
                    .setColor(Colors.Red)
                    .setTitle('‚ùå –û—à–∏–±–∫–∞')
                    .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã')
            ],
            ephemeral: true
        });
    }
}

async function handleRequestInfo(interaction: StringSelectMenuInteraction, report: ReportWithRelations) {
    try {
        const reporter = await interaction.client.users.fetch(report.reporter.discordId);
        if (!reporter) {
            logger.warn(`–ñ–∞–ª–æ–±—â–∏–∫ ${report.reporter.discordId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            await interaction.followUp({
                embeds: [
                    new EmbedBuilder()
                        .setColor(Colors.Red)
                        .setTitle('‚ùå –û—à–∏–±–∫–∞')
                        .setDescription('–ñ–∞–ª–æ–±—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
                ],
                ephemeral: true
            });
            return;
        }

        const requestEmbed = new EmbedBuilder()
            .setColor(Colors.Blue)
            .setTitle('‚ùî –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
            .setDescription(`–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${interaction.user.tag} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–π –∂–∞–ª–æ–±–µ #${report.id}.`)
            .addFields(
                { name: '–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã', value: report.reason },
                { name: '–ù–∞ –∫–æ–≥–æ', value: report.reported.username },
                { name: '–ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å', value: '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è.' }
            )
            .setFooter({ text: `ID –∂–∞–ª–æ–±—ã: ${report.id}` })
            .setTimestamp();

        const dmChannel = await reporter.createDM();
        await dmChannel.send({ embeds: [requestEmbed] })
            .then(() => {
                logger.info(`–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∂–∞–ª–æ–±—â–∏–∫—É ${reporter.tag}`);
            })
            .catch(err => {
                logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∂–∞–ª–æ–±—â–∏–∫—É:', err);
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–∞–ª–æ–±—â–∏–∫—É');
            });

        const successEmbed = new EmbedBuilder()
            .setColor(Colors.Blue)
            .setTitle('üì® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
            .setDescription(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∂–∞–ª–æ–±—â–∏–∫—É ${reporter.tag}.`)
            .setFooter({ text: `ID –∂–∞–ª–æ–±—ã: ${report.id}` })
            .setTimestamp();

        await interaction.followUp({ embeds: [successEmbed] });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∂–∞–ª–æ–±—â–∏–∫–∞
        const filter = (msg: Message) => msg.author.id === reporter.id && msg.channel.id === dmChannel.id;
        const collector = dmChannel.createMessageCollector({ filter, time: 86400_000 }); // 24 —á–∞—Å–∞

        collector.on('collect', async (msg) => {
            logger.info(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∂–∞–ª–æ–±—â–∏–∫–∞ ${reporter.tag} –ø–æ –∂–∞–ª–æ–±–µ #${report.id}`);

            const responseEmbed = new EmbedBuilder()
                .setColor(Colors.Blue)
                .setTitle(`üì© –û—Ç–≤–µ—Ç –ø–æ –∂–∞–ª–æ–±–µ #${report.id}`)
                .setDescription(msg.content)
                .addFields(
                    { name: '–ñ–∞–ª–æ–±—â–∏–∫', value: reporter.tag },
                    { name: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∂–∞–ª–æ–±–∞', value: report.reason }
                )
                .setFooter({ text: `ID –∂–∞–ª–æ–±—ã: ${report.id}` })
                .setTimestamp();

            await interaction.user.send({ embeds: [responseEmbed] })
                .then(() => {
                    logger.info(`–û—Ç–≤–µ—Ç –∂–∞–ª–æ–±—â–∏–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É ${interaction.user.tag}`);
                })
                .catch(err => {
                    logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É:', err);
                });

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∂–∞–ª–æ–±—â–∏–∫—É
            const confirmationEmbed = new EmbedBuilder()
                .setColor(Colors.Green)
                .setTitle('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω')
                .setDescription('–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!')
                .setFooter({ text: `ID –∂–∞–ª–æ–±—ã: ${report.id}` })
                .setTimestamp();

            await msg.reply({ embeds: [confirmationEmbed] });
            collector.stop();
        });

        collector.on('end', (collected, reason) => {
            logger.info(`–°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∂–∞–ª–æ–±—ã #${report.id} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${reason}. –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${collected.size}`);
        });

    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∂–∞–ª–æ–±–µ #${report.id}:`, error);
        await interaction.followUp({
            embeds: [
                new EmbedBuilder()
                    .setColor(Colors.Red)
                    .setTitle('‚ùå –û—à–∏–±–∫–∞')
                    .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
                    .addFields(
                        { name: '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', value: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }
                    )
            ],
            ephemeral: true
        });
    }
}