// Project: Hostezza Discord Bot
// Created by: bybla
// Created on: 2025-04-11
// Descripton: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Discord


// commands/other/report/report.ts
import { Command } from '../../../utils/commands/command';
import { 
    ActionRowBuilder, 
    Message, 
    UserSelectMenuBuilder, 
    UserSelectMenuInteraction,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    MessageActionRowComponentBuilder,
    EmbedBuilder,
    Colors
} from 'discord.js';
import prisma from '../../../db';
import { logger } from '../../../utils/logger/logger';

export default new Command({
    name: 'report',
    aliases: ['rprt', 'rep'],
    description: '–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    execute: async (message: Message) => {
        try {
            logger.info(`–ö–æ–º–∞–Ω–¥–∞ report –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${message.author.tag}`);

            // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const selectMenu = new UserSelectMenuBuilder()
                .setCustomId('report_user')
                .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∂–∞–ª–æ–±—ã')
                .setMaxValues(1);

            const row = new ActionRowBuilder<MessageActionRowComponentBuilder>()
                .addComponents(selectMenu);

            const selectEmbed = new EmbedBuilder()
                .setColor(Colors.Blue)
                .setTitle('üõ°Ô∏è –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã')
                .setDescription('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è')
                .setFooter({ 
                    text: `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${message.author.tag}`, 
                    iconURL: message.author.displayAvatarURL() 
                })
                .setTimestamp();

            const sentMessage = await message.reply({
                embeds: [selectEmbed],
                components: [row],
            });

            logger.debug(`–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${message.author.tag}`);

            // –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
            const collector = sentMessage.createMessageComponentCollector({
                filter: (interaction) => {
                    if (!interaction.isUserSelectMenu()) return false;
                    if (interaction.customId !== 'report_user') return false;
                    if (interaction.user.id !== message.author.id) {
                        interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setColor(Colors.Red)
                                    .setDescription('‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é!')
                            ],
                            ephemeral: true
                        }).catch(err => logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', err));
                        return false;
                    }
                    return true;
                },
                time: 60_000
            });

            collector.on('collect', async (interaction: UserSelectMenuInteraction) => {
                try {
                    const selectedUser = interaction.users.first();
                    
                    if (!selectedUser) {
                        logger.warn('–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        await interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setColor(Colors.Red)
                                    .setDescription('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
                            ],
                            ephemeral: true
                        });
                        return;
                    }

                    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.author.tag} –≤—ã–±—Ä–∞–ª ${selectedUser.tag} –¥–ª—è –∂–∞–ª–æ–±—ã`);

                    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã
                    const modal = new ModalBuilder()
                        .setCustomId(`report_modal_${selectedUser.id}`)
                        .setTitle(`–ñ–∞–ª–æ–±–∞ –Ω–∞ ${selectedUser.username}`);

                    const reasonInput = new TextInputBuilder()
                        .setCustomId('reason_input')
                        .setLabel("–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã")
                        .setPlaceholder("–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é...")
                        .setStyle(TextInputStyle.Paragraph)
                        .setRequired(true)
                        .setMinLength(10)
                        .setMaxLength(1000);

                    modal.addComponents(
                        new ActionRowBuilder<TextInputBuilder>().addComponents(reasonInput)
                    );

                    await interaction.showModal(modal);
                    logger.debug(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è ${message.author.tag}`);

                    // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                    try {
                        const modalSubmit = await interaction.awaitModalSubmit({
                            time: 120_000,
                            filter: i => i.customId === `report_modal_${selectedUser.id}` && 
                                       i.user.id === interaction.user.id
                        });

                        const reason = modalSubmit.fields.getTextInputValue('reason_input');
                        logger.debug(`–ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã –æ—Ç ${message.author.tag}`);

                        // –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        const report = await prisma.report.create({
                            data: {
                                reason,
                                reporter: {
                                    connectOrCreate: {
                                        where: { discordId: interaction.user.id },
                                        create: {
                                            discordId: interaction.user.id,
                                            username: interaction.user.username
                                        }
                                    }
                                },
                                reported: {
                                    connectOrCreate: {
                                        where: { discordId: selectedUser.id },
                                        create: {
                                            discordId: selectedUser.id,
                                            username: selectedUser.username
                                        }
                                    }
                                }
                            },
                            include: {
                                reported: true,
                                reporter: true
                            }
                        });

                        logger.info(`–ñ–∞–ª–æ–±–∞ #${report.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

                        // –≠–º–±–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∂–∞–ª–æ–±—â–∏–∫–∞
                        const successEmbed = new EmbedBuilder()
                            .setColor(Colors.Green)
                            .setTitle('‚úÖ –ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
                            .setDescription(`–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ ${selectedUser.tag} –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞`)
                            .addFields(
                                { name: 'ID –∂–∞–ª–æ–±—ã', value: report.id, inline: true },
                                { name: '–î–∞—Ç–∞', value: `<t:${Math.floor(Date.now()/1000)}:R>`, inline: true },
                                { name: '–ü—Ä–∏—á–∏–Ω–∞', value: reason.slice(0, 1000) }
                            )
                            .setFooter({ 
                                text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!', 
                                iconURL: message.guild?.iconURL() || undefined 
                            });

                        await modalSubmit.reply({
                            embeds: [successEmbed],
                            ephemeral: true
                        });

                        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±—ã –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤

                    } catch (error) {
                        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
                        await interaction.followUp({
                            embeds: [
                                new EmbedBuilder()
                                    .setColor(Colors.Red)
                                    .setTitle('‚ùå –û—à–∏–±–∫–∞')
                                    .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∂–∞–ª–æ–±—ã')
                            ],
                            ephemeral: true
                        }).catch(err => logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', err));
                    }
                } catch (error) {
                    logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                }
            });

            collector.on('end', (collected, reason) => {
                logger.debug(`–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –∂–∞–ª–æ–± –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –ü—Ä–∏—á–∏–Ω–∞: ${reason}. –°–æ–±—Ä–∞–Ω–æ: ${collected.size}`);
                sentMessage.edit({ 
                    embeds: [
                        new EmbedBuilder()
                            .setColor(Colors.Grey)
                            .setDescription('‚è≥ –í—Ä–µ–º—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ')
                    ],
                    components: [] 
                }).catch(err => logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã report:', error);
            await message.reply({
                embeds: [
                    new EmbedBuilder()
                        .setColor(Colors.Red)
                        .setTitle('‚ùå –û—à–∏–±–∫–∞')
                        .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã')
                ]
            }).catch(err => logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', err));
        }
    }
});